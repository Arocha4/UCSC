% Antoine rocha
% arocha4
% int_midpoint_rule 
% computes the numberical approximation of I(f).
% for n equally spaced subdivivions 

% input fun: function handle representing f(x)
%       a,b: the endpoints of the integration interval
%       n: number of evenly spaved points in the invterval  aka the # of subintervals

% output  I: numerical approximation of the integral
% comments above copied and pasted for other composite numerical approximation functions

function [I]=int_midpoint_rule(fun,a,b,n) % function given to complete 
h = (b-a)/(n-1); % midpoint 
sum1(1) = 0; % set sum 1 to 0
sum2(1) = 0; % set sum2 to 0
f(1) = 0;    % set place holder to 0
for i=1:n              % loop for second summation of midpoitn rule
  sum1(i) = a + (i-1)*h;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i=1:n-1        % loop for first summation  of midpont rule
  sum2(i) = (sum1(i+1) + sum1(i))/2;  
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i=2:n                             
  f(i) = f(i-1) + h*(fun(sum2(i-1))); % check class notes for sum midpoint formula  
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
I = f(n); % set I and display numerical aproximaiton
end
% this wasnt that hard to complete the function wasnt as complex.
% Once again Youtube had a totorial on a fucntion, which helped a ton
% didn't double check the answers due to time contraints so compared the 
% other functions output to each other and they all resemble each other 

